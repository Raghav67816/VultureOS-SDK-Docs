{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VultureOs SDK Welcome to VultureOs SDK documentation. Please note that the SDK is currently under development Source Code: GitHub Current Version: 1 Official Website: Coming Soon About VultureOs SDK is a software development kit for developing apps for VultureOs (Debian based) providing set of main features of the main app. Our current progress Complete System User Management System Cloud Database Device Registration JWT Token System Middlewares - Security Python Package - VultureOs User Interface Sensor Interfacing Alexa Integration Key features of the SDK Lightweight and Fast Fewer dependencies Easy to change Proper error handling Scanned programs (using Bandit) Installation Currently, SDK is only available on GitHub, but it will be soon available on PyPi Clone the GitHub repository git clone https://github.com/Raghav67816/VultureOS-SDK.git [===========================] 100% Done! cd vultureOs-sdk Install dependencies pip install -r requirements.txt [==========================] 100% Done! This SDK currently uses pymongo and python-dotenv as base dependencies. Install them using requirements.txt file the root folder. Setting up for UI development In the root folder of the SDK the folder named Widgets contains pre-made widgets which are made according to the UI standard of the main app. These widgets are written in QML and designed through QT Creator. Installing QT Creator Visit QT Official Website and create a new account if not. Go to QT Open Source Community Version Download Download the Qt Installer and run it Proceed to installation Install the preferred version of Qt with MinGW x64 compiler Wait for the installer to complete the process All set! Warning BEFORE INSTALLING QT CREATOR PLEASE CHECK FOR THE VERSION BEING USED IN THE DEVELOPMENT OF MAIN APP IN DOCUMENTATION TO MATCH THE COMPATIBILITY OF THE MAIN APP AND CHILD APP. If you encounter any problem during the installation, please reach us at innovationinfinite8@gmail.com Additional requirements The SDK uses MongoDB for storing devices and error. This is a testing feature. Here you can use the local MongoDB database, or you can use the online MongoDB. For using MongoDB locally please visit MongoDB Community Server Download . Getting Started Before getting started, please make sure to complete the steps above. If you have completed the setup then, proceed to Getting Started License This project is Licensed under MIT License","title":"VultureOs SDK"},{"location":"#vultureos-sdk","text":"Welcome to VultureOs SDK documentation. Please note that the SDK is currently under development Source Code: GitHub Current Version: 1 Official Website: Coming Soon","title":"VultureOs SDK"},{"location":"#about","text":"VultureOs SDK is a software development kit for developing apps for VultureOs (Debian based) providing set of main features of the main app.","title":"About"},{"location":"#our-current-progress","text":"Complete System User Management System Cloud Database Device Registration JWT Token System Middlewares - Security Python Package - VultureOs User Interface Sensor Interfacing Alexa Integration","title":"Our current progress"},{"location":"#key-features-of-the-sdk","text":"Lightweight and Fast Fewer dependencies Easy to change Proper error handling Scanned programs (using Bandit)","title":"Key features of the SDK"},{"location":"#installation","text":"Currently, SDK is only available on GitHub, but it will be soon available on PyPi Clone the GitHub repository git clone https://github.com/Raghav67816/VultureOS-SDK.git [===========================] 100% Done! cd vultureOs-sdk Install dependencies pip install -r requirements.txt [==========================] 100% Done! This SDK currently uses pymongo and python-dotenv as base dependencies. Install them using requirements.txt file the root folder.","title":"Installation"},{"location":"#setting-up-for-ui-development","text":"In the root folder of the SDK the folder named Widgets contains pre-made widgets which are made according to the UI standard of the main app. These widgets are written in QML and designed through QT Creator. Installing QT Creator Visit QT Official Website and create a new account if not. Go to QT Open Source Community Version Download Download the Qt Installer and run it Proceed to installation Install the preferred version of Qt with MinGW x64 compiler Wait for the installer to complete the process All set! Warning BEFORE INSTALLING QT CREATOR PLEASE CHECK FOR THE VERSION BEING USED IN THE DEVELOPMENT OF MAIN APP IN DOCUMENTATION TO MATCH THE COMPATIBILITY OF THE MAIN APP AND CHILD APP. If you encounter any problem during the installation, please reach us at innovationinfinite8@gmail.com","title":"Setting up for UI development"},{"location":"#additional-requirements","text":"The SDK uses MongoDB for storing devices and error. This is a testing feature. Here you can use the local MongoDB database, or you can use the online MongoDB. For using MongoDB locally please visit MongoDB Community Server Download .","title":"Additional requirements"},{"location":"#getting-started","text":"Before getting started, please make sure to complete the steps above. If you have completed the setup then, proceed to Getting Started","title":"Getting Started"},{"location":"#license","text":"This project is Licensed under MIT License","title":"License"},{"location":"User%20Guide/Authenticatation/","text":"To simulate real experience for testing, authenticating user and playing around makes it development more easy. You can authenticate yourself as a user using admin . authenticate ( email , password ) . main.py 1 2 3 4 from admin import authenticate_user user = authenticate_user ( email , password ) print ( user ) This will try to authenticate user and store the dict containing imporatant information and then return it. example_json { \"kind\" : \"identitytoolkit#VerifyPasswordResponse\" , \"localId\" : \"snzZNdXCQuVrT6pyqk2HxDnDn4M2\" , \"email\" : \"johndoe@gmail.com\" , \"displayName\" : \"John Doe\" , \"idToken\" : \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijk1MWMwOGM1MTZhZTM1MmI4OWU0ZDJlMGUxNDA5NmY3MzQ5NDJhODciLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiSm9obiBEb2UiLCJkZXZlbG9wZXIiOmZhbHNlLCJlbXBsb3llZSI6ZmFsc2UsImlzcyI6Imh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS92dWx0dXJld2ViLWVlNTM1IiwiYXVkIjoidnVsdHVyZXdlYi1lZTUzNSIsImF1dGhfdGltZSI6MTY3MDE0ODk2NCwidXNlcl9pZCI6InNuelpOZFhDUXVWclQ2cHlxazJIeERuRG40TTIiLCJzdWIiOiJzbnpaTmRYQ1F1VnJUNnB5cWsySHhEbkRuNE0yIiwiaWF0IjoxNjcwMTQ4OTY0LCJleHAiOjE2NzAxNTI1NjQsImVtYWlsIjoiam9obmRvZUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInBob25lX251bWJlciI6Iis5MTkzMTkzNzY4MzAiLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7InBob25lIjpbIis5MTkzMTkzNzY4MzAiXSwiZW1haWwiOlsiam9obmRvZUBnbWFpbC5jb20iXX0sInNpZ25faW5fcHJvdmlkZXIiOiJwYXNzd29yZCJ9fQ.HbUH8VifbFesXKRpCZYqJ2bapp7QxUcBx8Kb13SbicH7HcwIteYwtcBNM_UGQf8acNDHchkPxjIyugKmWexJsAmvwm79-X6Dmak0V26qK8d7xWeFqxzoa62AaWbJHGnRGQPmGp5tMJOZKyTruxrur6O9FMZv9IpkrqhT1Ckk0svG0S_VYuHHHBk0JMyXsNwDKMKwIAM5JZij7NOuHb9sV_exkxNZcWJWXtzyp6EdkKesqwXVnSPcbDK-EJ2yuG8L9PfsusbE-K0MkbVA3gcm0zggRoFCh7oJJ-hiYkXA8SYbg7VGPUJqZ8uPQuAs43RHKwrFgyRYA1mA6YTuSNLg-w\" , \"registered\" : true , \"refreshToken\" : \"AOkPPWRRwd3fX5ePLgDqe_s2dfILSfRU7LeZaGyK7z_Emw-E_rNRhTKVzSAVcpLqguhDm8fdeMGUO6Ta4NEEasTLSzdMVf_wxUcgXVCeCZviaK74TIqp1dHTZ3TCdzGxmU6Ecelaz330LCsnoVz3kslAReTfbifzSCfun9Xq3koSRBMEC2UxCCEMvf5E9jhWqTPvRT8YW33PRgHsvpRNPNNpnoPG773snJFX-qfUKc3ACKROhaZ0NO8\" , \"expiresIn\" : \"3600\" } Then we can get keys from this dict to process values. However VultureOS SDK automates this process for you. It automatically collects information and writes it to the config file. config.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [weather] base_url = https://api.openweathermap.org/data/2.5/weather?q= api_key = sample api key city = [db] url = mongodb://127.0.0.1:27017/ name = Vulture_Web_DB [user] display_name = John Doe id_token = eyJhbGciOiJSUzI1NiIsImtpZCI6Ijk1MWMwOGM1MTZhZTM1MmI4OWU0ZDJlMGUxNDA5NmY3MzQ5NDJhODciLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiSm9obiBEb2UiLCJkZXZlbG9wZXIiOnRydWUsImVtcGxveWVlIjp0cnVlLCJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vdnVsdHVyZXdlYi1lZTUzNSIsImF1ZCI6InZ1bHR1cmV3ZWItZWU1MzUiLCJhdXRoX3RpbWUiOjE2NzAxNTI2NzAsInVzZXJfaWQiOiJ2TjJicm9kTFFuYVNEbTVsdWVyUjZjcGFDSEoyIiwic3ViIjoidk4yYnJvZExRbmFTRG01bHVlclI2Y3BhQ0hKMiIsImlhdCI6MTY3MDE1MjY3MCwiZXhwIjoxNjcwMTU2MjcwLCJlbWFpbCI6ImpvaG5kb2VAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwaG9uZV9udW1iZXIiOiIrOTE5MzE5Mzc2ODMwIiwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJwaG9uZSI6WyIrOTE5MzE5Mzc2ODMwIl0sImVtYWlsIjpbImpvaG5kb2VAZ21haWwuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.d6u_w3XINO7NILJaFJuQY_082eC4qw3WTMsSgmuAvcCawOo4ucrovNj345ZiBhMe5C_yVqQMj4LQDfloztdn-mH7vjHW3Mwj7CB3xum7K-QLNIv1xEss5eY_SBM8mmfMjkejAi0-bqQb_S1WkCTnQ-rCdHwkmCqvDjvmLpx-SO2XzS9NhdDF1TcL0m5HZDnzeWPh2HbbKTB8H73ltot2XrcwZAlAyiW42Z4Rq01pR3F-Awkmpi7SfCyAdUALBMk6HCY9Mec4Y7W0F38kL0M30Xdo3JaYu1Ny-1hAaBrvZZ41SYtQuu2IUUBJpELPjuKYAajxaseDHjcZOkRVeR0hFw user_uid = vN2brodLQnaSDm5luerR6cpaCHJ2 email = johndoe@gmail.com [request_urls] login = http://127.0.0.1:3000/auth/login device_reg = http://127.0.0.1:3000/devices/register get_app = http://127.0.0.1:3000/vstore/get_apps upload_new = http://127.0.0.1:3000/vstore/upload_new [system] ip_address = apps_path = apps/ mqtt_port = 1883","title":"Authenticatation"},{"location":"User%20Guide/Creating%20Project/","text":"Creating new project SDK already provides functions to quickly create a project according to the environment of the actual OS. First, activate the virtualenv (if using) and start python3 >>> from admin import create_config_file >>> dir_path = \"<path/to/dir>\" >>> create_config_file(dir_path) This outputs the following, if successfull Generating default configuration file. File generated This creates a .ini file which works as a settings file in the specified directory. However, it is recommended to store the .ini file in the project or root directory. config.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [weather] base_url = https://api.openweathermap.org/data/2.5/weather?q= api_key = <openweather_api_key> city = [db] url = <your MongoDB url> name = <your MongoDB name> [user] display_name = id_token = user_uid = email = [request_urls] login = http://127.0.0.1:8000/auth/login device_reg = http://127.0.0.1:8000/devices/register get_app = http://127.0.0.1:8000/vstore/get_apps upload_new = http://127.0.0.1:8000/vstore/upload_new [system] ip_address = <your ip address> apps_path = apps/ mqtt_port = 1883 Warning Endpoints in the request_urls are for localhost only because the API is not hosted yet. But, these urls will be updated once the API is up and running. This functionallity can also be acheived by a python file. main.py 1 2 3 4 from admin import create_config_file dir_path = \"path/to/dir\" create_config_file ( dir_path ) Sections in config file Descriptions of the sections in config.ini . All the sections except Weather are must to use. Weather Weather section is optional, this feature is already implemented in the OS, but it is for our innovative vultures who can make even this feature unique somehow. However, it is not necessary to use OpenWeather only. DB - Database DB section is important because the OS uses MongoDB locally to manage data instead of json files. As, it's more accurate and secure. Using MongoDB is important to ensure performance and optimization. User User sections stores user credentails once the user is authenticated using admin . authenticate_user ( email , password ) in the admin file. Request URLs request_urls section holds the endpoints to which you can call to perform various functions. System System section holds only required values from your system. Note Your IP Address is not shared with any 3rd-patry clients. It is securily fetched through netifaces python package.","title":"Creating new project"},{"location":"User%20Guide/Creating%20Project/#creating-new-project","text":"SDK already provides functions to quickly create a project according to the environment of the actual OS. First, activate the virtualenv (if using) and start python3 >>> from admin import create_config_file >>> dir_path = \"<path/to/dir>\" >>> create_config_file(dir_path) This outputs the following, if successfull Generating default configuration file. File generated This creates a .ini file which works as a settings file in the specified directory. However, it is recommended to store the .ini file in the project or root directory. config.ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [weather] base_url = https://api.openweathermap.org/data/2.5/weather?q= api_key = <openweather_api_key> city = [db] url = <your MongoDB url> name = <your MongoDB name> [user] display_name = id_token = user_uid = email = [request_urls] login = http://127.0.0.1:8000/auth/login device_reg = http://127.0.0.1:8000/devices/register get_app = http://127.0.0.1:8000/vstore/get_apps upload_new = http://127.0.0.1:8000/vstore/upload_new [system] ip_address = <your ip address> apps_path = apps/ mqtt_port = 1883 Warning Endpoints in the request_urls are for localhost only because the API is not hosted yet. But, these urls will be updated once the API is up and running. This functionallity can also be acheived by a python file. main.py 1 2 3 4 from admin import create_config_file dir_path = \"path/to/dir\" create_config_file ( dir_path )","title":"Creating new project"},{"location":"User%20Guide/Creating%20Project/#sections-in-config-file","text":"Descriptions of the sections in config.ini . All the sections except Weather are must to use.","title":"Sections in config file"},{"location":"User%20Guide/Creating%20Project/#weather","text":"Weather section is optional, this feature is already implemented in the OS, but it is for our innovative vultures who can make even this feature unique somehow. However, it is not necessary to use OpenWeather only.","title":"Weather"},{"location":"User%20Guide/Creating%20Project/#db-database","text":"DB section is important because the OS uses MongoDB locally to manage data instead of json files. As, it's more accurate and secure. Using MongoDB is important to ensure performance and optimization.","title":"DB - Database"},{"location":"User%20Guide/Creating%20Project/#user","text":"User sections stores user credentails once the user is authenticated using admin . authenticate_user ( email , password ) in the admin file.","title":"User"},{"location":"User%20Guide/Creating%20Project/#request-urls","text":"request_urls section holds the endpoints to which you can call to perform various functions.","title":"Request URLs"},{"location":"User%20Guide/Creating%20Project/#system","text":"System section holds only required values from your system. Note Your IP Address is not shared with any 3rd-patry clients. It is securily fetched through netifaces python package.","title":"System"},{"location":"User%20Guide/Device%20Communication/","text":"Device communicaiton in Vulture Pi is accomplished through MQTT server running on local network. Using local network is not important while developing but during production using MQTT on local network is important to ensure security and performance. Starting a local MQTT Server Running a MQTT server is easy. Our team did not find much easier instructions so they are provided here. Requirements Ubuntu or Linux or WSL MQTT package Installing dependencies To install MQTT package run: sudo apt install mosquitto --------------------> 100% Done! You may need to enter your password After installing, create a custom configuration file for the local server. server settings.conf 1 2 3 4 5 6 7 8 9 10 11 listener 1883 <your_ip_address> log_dest syslog log_dest stdout log_dest topic log_type error log_type warning log_type notice log_type information connection_messages true log_timestamp true allow_anonymous true This is the configuration file for the MQTT local server we will use this by: mosquitto -c /etc/mosquitto/server_settings.conf The path after -c flag depends on the file path of your .conf file. Warning It is recommended to save the configuration file in /etc/mosquitto directory. Server will fail to start if the IP Address provided is invalid. So, keep in mind to update IP address once you connect to any other internet. After hitting enter the server should start and output the following: 1670310431: mosquitto version 2.0.11 starting 1670310431: Config loaded from /etc/mosquitto/server_settings.conf. 1670310431: Opening ipv4 listen socket on port 1883. 1670310431: mosquitto version 2.0.11 running Success The server is running. You can now subscribe to topics, publish messages through the SDK or the terminal itself. Connecting to broker Using this feature in SDK is easy. By calling device_com . connect_broker () . This function does not take any arguments as it utilises settings in the settings.ini file under system sections namely ip_address and mqtt_port . main.py 1 2 3 from device_com import connect_broker connect_broker () Through this function python will start listening on the local ip address and default port 1883. Utilise incoming values device_com . connect_broker () already has an event name on_message which is triggered when a message is received by the client. By default this decodes the values and returns it. You can use those value like: main.py 1 2 3 4 5 6 7 8 from device_com import connect_broker vals = connect_broker () if vals == 0 : # Put any condition you want print ( \"Value received is 0\" ) else : print ( \"Value received is not 0\" )","title":"Device Communication"},{"location":"User%20Guide/Device%20Communication/#starting-a-local-mqtt-server","text":"Running a MQTT server is easy. Our team did not find much easier instructions so they are provided here.","title":"Starting a local MQTT Server"},{"location":"User%20Guide/Device%20Communication/#requirements","text":"Ubuntu or Linux or WSL MQTT package","title":"Requirements"},{"location":"User%20Guide/Device%20Communication/#installing-dependencies","text":"To install MQTT package run: sudo apt install mosquitto --------------------> 100% Done! You may need to enter your password After installing, create a custom configuration file for the local server. server settings.conf 1 2 3 4 5 6 7 8 9 10 11 listener 1883 <your_ip_address> log_dest syslog log_dest stdout log_dest topic log_type error log_type warning log_type notice log_type information connection_messages true log_timestamp true allow_anonymous true This is the configuration file for the MQTT local server we will use this by: mosquitto -c /etc/mosquitto/server_settings.conf The path after -c flag depends on the file path of your .conf file. Warning It is recommended to save the configuration file in /etc/mosquitto directory. Server will fail to start if the IP Address provided is invalid. So, keep in mind to update IP address once you connect to any other internet. After hitting enter the server should start and output the following: 1670310431: mosquitto version 2.0.11 starting 1670310431: Config loaded from /etc/mosquitto/server_settings.conf. 1670310431: Opening ipv4 listen socket on port 1883. 1670310431: mosquitto version 2.0.11 running Success The server is running. You can now subscribe to topics, publish messages through the SDK or the terminal itself.","title":"Installing dependencies"},{"location":"User%20Guide/Device%20Communication/#connecting-to-broker","text":"Using this feature in SDK is easy. By calling device_com . connect_broker () . This function does not take any arguments as it utilises settings in the settings.ini file under system sections namely ip_address and mqtt_port . main.py 1 2 3 from device_com import connect_broker connect_broker () Through this function python will start listening on the local ip address and default port 1883.","title":"Connecting to broker"},{"location":"User%20Guide/Device%20Communication/#utilise-incoming-values","text":"device_com . connect_broker () already has an event name on_message which is triggered when a message is received by the client. By default this decodes the values and returns it. You can use those value like: main.py 1 2 3 4 5 6 7 8 from device_com import connect_broker vals = connect_broker () if vals == 0 : # Put any condition you want print ( \"Value received is 0\" ) else : print ( \"Value received is not 0\" )","title":"Utilise incoming values"},{"location":"User%20Guide/Registering%20Devices/","text":"Once, you purchase a device beloging to Vulture Pi, then on the backside of the product you will find device serial number. Using this you can register it. Registering the device is similar to claiming the ownership of the device. This can be accomplished using Web Version, but for developers this feature is also provided in the SDK. main.py 1 2 3 from device_manager import register_new_device register_new_device ( device_type , device_sr_no , owner_uid , id_token ) The parameters are already in the settings.ini file. For getting these values you have to make your own configpareser object. If successfull it would return a dictionary The dictionary will contain device serial number, message and owner uid. Once, registered then the device can be omitted by the employees only.","title":"Registering Devices"}]}